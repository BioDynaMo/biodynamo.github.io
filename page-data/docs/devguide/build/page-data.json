{"componentChunkName":"component---src-templates-markdown-post-js","path":"/docs/devguide/build/","webpackCompilationHash":"2987cc7be11ec950fa44","result":{"data":{"site":{"siteMetadata":{"siteUrl":"http://local:8000","title":"BioDynaMO Website","description":"Everything you need to know about biology simulations."}},"markdownRemark":{"frontmatter":{"title":"Building Biodynamo","date":"2019-01-01","date_pretty":"01 January, 2019","path":"/docs/devguide/build/","meta_title":"BioDynaMo Dev Guide","meta_description":"This is the how to build page.","image":"","next":{"url":"/docs/devguide/build/","title":"Building Biodynamo","description":"This is the how to build page."},"sidebar":"devguide","toc":true},"html":"<p>To build BioDynaMo from source execute the following commands:</p>\n<a class=\"sbox\" href= \"/docs/userguide/\" target=\"_blank\" rel=\"noopener\">\n    <div class=\"sbox-content\">\n    \t<h4><b>Info<b><h4>\n    \t<p>If you are a user please follow the installation instructions in our <font color=\"blue\"><u>user guide</u></font>.\n\t\t</p>\n    </div>\n</a>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token function\">cd</span> biodynamo\n\n<span class=\"token comment\"># Install the prerequisites for the project</span>\n./prerequisites.sh all\n\n<span class=\"token comment\"># Create the build directory</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token function\">cd</span> build\n\n<span class=\"token comment\"># Build the project</span>\ncmake <span class=\"token punctuation\">..</span>/\n<span class=\"token function\">make</span>\n\n<span class=\"token comment\"># (Optional) Installs the library</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<p>The script <code class=\"language-text\">prerequisites.sh</code> is used to install all the dependencies needed by BioDynaMo. You will need\nto run it before actually calling <code class=\"language-text\">cmake</code> and <code class=\"language-text\">make</code>. It will also choose the specific dependencies given the operating systems.\nRun <code class=\"language-text\">./prerequisites.sh --help</code> to see how to use it.</p>\n<p>!!! attention</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">When trying to install the prerequisites on MacOS the script will user `brew` as a default install method.\nIf you do not have `brew` on your system, or you are using a different package manager, you will need to\nmanually install all the required packages. Please have a look to the [Prerequisites](user/prerequisites) page.</code></pre></div>\n<h2 id=\"centos-7\"><a href=\"#centos-7\" aria-label=\"centos 7 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CentOS 7</h2>\n<p>In case of CentOS, you will need to run some additional commands before actually calling <code class=\"language-text\">cmake</code> and <code class=\"language-text\">make</code>. This is because\nCentOS do not provide by default the correct C++ compilers and the correct python interpreter. Moerover, we will need to\nload the OpenMPI module. You will need to run these instructions only before building BioDynaMo. You will not need them in\norder to run the library.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token function\">cd</span> biodynamo\n./prerequisites.sh all centos-7\n\n<span class=\"token function\">export</span> MESA_GL_VERSION_OVERRIDE<span class=\"token operator\">=</span>3.3\n<span class=\"token keyword\">.</span> scl_source <span class=\"token function\">enable</span> rh-python36\n<span class=\"token keyword\">.</span> scl_source <span class=\"token function\">enable</span> devtoolset-7\n\n<span class=\"token keyword\">.</span> /etc/profile.d/modules.sh\nmodule load mpi\n\n<span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span>/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<h2 id=\"macos\"><a href=\"#macos\" aria-label=\"macos permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MacOS</h2>\n<p>Before building BioDynaMo on MacOS you will need to provide to <code class=\"language-text\">cmake</code> a C++14 and OpenMP compatible compiler. This can\nbe done by setting the environmental variables <code class=\"language-text\">CXX</code> and <code class=\"language-text\">C</code> for the C++ and C compilers.\nHere as example we show the procedure using <code class=\"language-text\">clang</code> compiler installed using <code class=\"language-text\">brew</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token function\">cd</span> biodynamo\n./prerequisites.sh all osx\n\n<span class=\"token function\">export</span> LLVMDIR<span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/llvm\"</span>\n<span class=\"token function\">export</span> CC<span class=\"token operator\">=</span><span class=\"token variable\">$LLVMDIR</span>/bin/clang\n<span class=\"token function\">export</span> CXX<span class=\"token operator\">=</span><span class=\"token variable\">$LLVMDIR</span>/bin/clang++\n<span class=\"token function\">export</span> CXXFLAGS<span class=\"token operator\">=</span>-I<span class=\"token variable\">$LLVMDIR</span>/include\n<span class=\"token function\">export</span> LDFLAGS<span class=\"token operator\">=</span>-L<span class=\"token variable\">$LLVMDIR</span>/lib\n<span class=\"token function\">export</span> PATH<span class=\"token operator\">=</span><span class=\"token variable\">$LLVMDIR</span>/bin:<span class=\"token variable\">$PATH</span>\n\n<span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span>/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<h2 id=\"cmake-build-options\"><a href=\"#cmake-build-options\" aria-label=\"cmake build options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CMake Build Options</h2>\n<p>Our CMake build script uses a few options to influence the build process. They can be set as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake -Doption<span class=\"token operator\">=</span>value <span class=\"token punctuation\">..</span></code></pre></div>\n<p>The value for binary options is <code class=\"language-text\">on</code> or <code class=\"language-text\">off</code>.\nIf you change the value of these switches, you might have to delete <code class=\"language-text\">CMakeCache.txt</code> beforehand.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">test</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>build the test executables; precondition for e.g. <code class=\"language-text\">valgrind</code> and <code class=\"language-text\">coverage</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">dict</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>build ROOT dictionaries. These are compulsory to use backups. Turning them off reduces compilation time.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">paraview</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>Enable visualization using ParaView. Visualization cannot be used if this switch is turned off.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cuda</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>enable CUDA code generation for GPU acceleration</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">opencl</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>enable OpenCL code generation for GPU acceleration</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">valgrind</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>enable memory leak checks</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">coverage</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>creates a make target to generate a html report indicating which parts of the code are tested by automatic tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">jemalloc</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>use <code class=\"language-text\">jemalloc</code> for memory allocations</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">tcmalloc</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>use <code class=\"language-text\">tcmalloc</code> for memory allocations</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">website</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>enable website generation (<code class=\"language-text\">make website&lt;-live&gt;</code> target (see below for more information))</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"further-cmake-command-line-parameters\"><a href=\"#further-cmake-command-line-parameters\" aria-label=\"further cmake command line parameters permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further CMake command line parameters</h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">CMAKE_CXX_FLAGS</code></td>\n<td>specify additional compiler flags - e.g. <code class=\"language-text\">&quot;-mavx&quot;</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CMAKE_BUILD_TYPE</code></td>\n<td>specify the build type. Possible values are <code class=\"language-text\">Debug, Release, RelWithDebInfo, MinSizeRel</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"build-targets\"><a href=\"#build-targets\" aria-label=\"build targets permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build Targets</h2>\n<table>\n<thead>\n<tr>\n<th>Target</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">run-unit-tests</code></td>\n<td>executes all BioDynaMo unit tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">run-valgrind</code></td>\n<td>executes BioDynaMo valgrind tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">run-check</code></td>\n<td>executes both unit and valgrind tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">run-demos</code></td>\n<td>executes all demos and integration tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">clean</code></td>\n<td>will clean all targets, also the external projects</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cleanbuild</code></td>\n<td>will clean everything in the build directory, except for third_party (useful for avoiding downloading third party software)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bdmclean</code></td>\n<td>will only clean the <code class=\"language-text\">biodynamo</code> and <code class=\"language-text\">runBiodynamoTests*</code> targets</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">testbdmclean</code></td>\n<td>will only clean the <code class=\"language-text\">runBiodynamoTests*</code> target</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">doc</code></td>\n<td>will generate the API, user and developer documentation in directory <code class=\"language-text\">build/doc</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">coverage</code></td>\n<td>will execute the test target and generate a coverage report in <code class=\"language-text\">build/coverage</code>. Make sure that <code class=\"language-text\">gcov</code> and <code class=\"language-text\">lcov</code> are installed and configure cmake with <code class=\"language-text\">cmake -Dcoverage=on ..</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">coverage-build</code></td>\n<td>same as <code class=\"language-text\">make coverage</code>, but builds it in a separate directory (<code class=\"language-text\">build/coverage</code>). Since building the coverage report requires different compiler flags, building it in a separate directory keeps the current build directory in good order.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"c-code-style-related-build-targets\"><a href=\"#c-code-style-related-build-targets\" aria-label=\"c code style related build targets permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ Code Style Related Build Targets</h3>\n<p>The following targets are only available if <code class=\"language-text\">clang-format</code>, <code class=\"language-text\">clang-tidy</code> and <code class=\"language-text\">git</code> are installed.</p>\n<p>Build targets indicated with <code class=\"language-text\">*</code> always come in three different flavors.</p>\n<ul>\n<li><code class=\"language-text\">no-suffix</code>: executes the target on source files that changed compared to origin/master -- e.g. <code class=\"language-text\">make check-format</code></li>\n<li><code class=\"language-text\">-staged</code>: executes the target on source files that have been staged -- e.g. <code class=\"language-text\">make check-format-staged</code></li>\n<li><code class=\"language-text\">-all</code>: executes the target on all source files in the project -- e.g. <code class=\"language-text\">make check-format-all</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Target</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">check-format*</code></td>\n<td>run clang-format on selected files. Fails if any file needs to be reformatted</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">show-format*</code></td>\n<td>run clang-format on selected files and display differences</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">format*</code></td>\n<td>run clang-format on selected files and update them in-place</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">check-tidy*</code></td>\n<td>run clang-tidy on selected files. Fails if errors are found</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">show-tidy*</code></td>\n<td>run clang-tidy on selected files and display errors.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">tidy*</code></td>\n<td>run clang-tidy on selected files and attempt to fix any warning automatically</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">check-cpplint*</code></td>\n<td>run cpplint on selected files. Fails if errors are found and displays them.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">check-submission</code></td>\n<td>will build, run all tests, check formatting, code style, and generate documentation and coverage report</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">fix-submission</code></td>\n<td>will attempt to fix the reported issues using <code class=\"language-text\">clang-format</code> and <code class=\"language-text\">clang-tidy</code>. Failing build, tests, compiler warnings, issues from cpplint and warnings from doxygen must be fixed manually. Also some <code class=\"language-text\">clang-tidy</code> issues cannot be resolved automatically</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"website-related-build-targets\"><a href=\"#website-related-build-targets\" aria-label=\"website related build targets permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Website Related Build Targets</h3>\n<table>\n<thead>\n<tr>\n<th>Target</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">website</code></td>\n<td>will generate the static files used for biodynamo.org</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">website-live</code></td>\n<td>starts a local web server so you can immediately view the website in the browser. The website is automatically reloaded if you change a source file.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"advanced-build-options\"><a href=\"#advanced-build-options\" aria-label=\"advanced build options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Build Options</h2>\n<h4 id=\"use-a-custom-compiler\"><a href=\"#use-a-custom-compiler\" aria-label=\"use a custom compiler permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use a Custom Compiler</h4>\n<p>If you need to user a custom compilers (instead of the one automatically detected by BioDynaMo) you will need\nto set the variables: <code class=\"language-text\">CXX</code> for the C++ compiler and <code class=\"language-text\">CC</code> for the C compiler. Please not that your custom compiler\nmust support the C++14 standard and must be compatible with OpenMP. The complete procedure will become:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token function\">cd</span> biodynamo\n\n<span class=\"token comment\"># Let's say I want to use a custom version of clang</span>\n<span class=\"token function\">export</span> CXX<span class=\"token operator\">=</span>/opt/local/bin/clang++-mp-8.0\n<span class=\"token function\">export</span> C<span class=\"token operator\">=</span>/opt/local/bin/clang++-mp-8.0\n\n./install.sh</code></pre></div>\n<h4 id=\"use-a-specific-root--paraview-installation\"><a href=\"#use-a-specific-root--paraview-installation\" aria-label=\"use a specific root  paraview installation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use a Specific ROOT / ParaView Installation</h4>\n<p>When you want to inform BioDynaMo of a specific installation of ROOT and /or ParaView on your system,\nyou will need to perform the following instructions prior to installation.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token function\">cd</span> biodynamo\n\n<span class=\"token comment\"># For ROOT</span>\n<span class=\"token function\">source</span> <span class=\"token operator\">&lt;</span>root_installation_dir<span class=\"token operator\">></span>/bin/thisroot.sh\n\n<span class=\"token comment\"># For ParaView</span>\n<span class=\"token function\">export</span> ParaView_DIR<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>paraview_installation_dir<span class=\"token operator\">></span>/lib/cmake/paraview-5.8\n<span class=\"token function\">export</span> Qt5_DIR<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>qt5_installation_dir<span class=\"token operator\">></span>/lib/cmake/Qt5\n\n./install.sh</code></pre></div>\n<p>!!! attention</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">If you specify ParaView_DIR, then you will need to provide also the Qt5_DIR variable.\nThis is because ParaView implicitly relies on the Qt5 installation.</code></pre></div>\n<h4 id=\"speed-up-installation-tests-with-a-local-biodynamo-lfs-copy\"><a href=\"#speed-up-installation-tests-with-a-local-biodynamo-lfs-copy\" aria-label=\"speed up installation tests with a local biodynamo lfs copy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Speed Up Installation Tests with a Local BioDynaMo-LFS Copy</h4>\n<p>The installation scripts fetch large precompiled dependencies like paraview\nor root from biodynamo's large file storage (LFS). To enable faster builds you can download the whole\nLFS and tell BioDynaMo to access the local version instead. This is done with the\nenvironmental flag <code class=\"language-text\">BDM_LOCAL_LFS</code>. Use an absolute path to the directory\nthat contains the local copy.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">export</span> BDM_LOCAL_LFS<span class=\"token operator\">=</span>/path/to/local/lfs</code></pre></div>\n<p>If you want to download the files from remote LFS again execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">unset BDM_LOCAL_LFS</code></pre></div>\n<br>\n<a class=\"sbox\" target=\"_blank\" rel=\"noopener\">\n    <div class=\"sbox-content\">\n    \t<h4><b>Warning<b><h4>\n    \t<p>At the moment there is no check if the local copy is in synch with\n    remote. You have to ensure that yourself!\n\t\t</p>\n    </div>\n</a>","fields":{"slug":"/docs/devguide/build/"},"timeToRead":8,"excerpt":"To build BioDynaMo from source execute the following commands:The script  is used to install all the dependencies needed by BioDynaMo. You…","fileAbsolutePath":"/website/content/biodynamo/doc/dev_guide/build.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/devguide/build/"}}}