{"componentChunkName":"component---src-templates-markdown-post-js","path":"/docs/devguide/code_quality/","webpackCompilationHash":"d2a01ec117f514261272","result":{"data":{"site":{"siteMetadata":{"siteUrl":"http://local:8000","title":"BioDynaMO Website","description":"Everything you need to know about biology simulations."}},"markdownRemark":{"frontmatter":{"title":"Code Quality","date":"2019-01-01","date_pretty":"01 January, 2019","path":"/docs/devguide/code_quality/","meta_title":"BioDynaMo Dev Guide","meta_description":"This is the code quality page.","image":"","next":{"url":"/docs/devguide/code_quality/","title":"Code Quality","description":"This is the code quality page."},"sidebar":"devguide","toc":true},"html":"<p>At BioDynaMo we are aiming to develop a high quality software product. The following practices help us to achieve this goal:</p>\n<ul>\n<li>C++ Style Guide</li>\n<li>Documentation (User guide, Developer guide, API)</li>\n<li>Git Conventions</li>\n<li>Test driven development (TDD)</li>\n<li>Continues integration (CI)</li>\n</ul>\n<h2 id=\"code-styleguide\"><a href=\"#code-styleguide\" aria-label=\"code styleguide permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code Styleguide</h2>\n<p>A coding styleguide is a set of guidelines and best practices which improve readability and maintainability of a code base. Code is more often read than rewritten. Therefore it is important that a developer quickly understands a piece of code even if it was written by someone else. A coding standard helps to achieve that. We are using the <a href=\"https://google.github.io/styleguide/cppguide.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google C++ Style Guide</a></p>\n<h2 id=\"test-driven-development-tdd-and-continues-integration-ci\"><a href=\"#test-driven-development-tdd-and-continues-integration-ci\" aria-label=\"test driven development tdd and continues integration ci permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Driven Development (TDD) and Continues Integration (CI)</h2>\n<p>TDD and CI are two practices from agile development. Test Driven Development is a special way of using unit tests. A unit test is a piece of code that tests a certain functionality of our application. If we make some changes in the code and at the end all unit tests pass, we most likely did not break something. This increases confidence in the code and reduces the fear to \"touch\" others code.\nContinues Integration takes all this automated tests and executes them on every change to the code repository. We are using <a href=\"https://github.com/BioDynaMo/biodynamo/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github Actions</a>.</p>\n<p>More information:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=QCif_-r8eK4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intro to TDD</a></li>\n<li>Beck, Kent. Extreme programming explained: embrace change. addison-wesley professional, 2000.</li>\n</ul>\n<h2 id=\"git-conventions\"><a href=\"#git-conventions\" aria-label=\"git conventions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Conventions</h2>\n<h3 id=\"git-workflow\"><a href=\"#git-workflow\" aria-label=\"git workflow permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Workflow</h3>\n<p>We are following the Git workflow proposed by Vincent Driessen in his blog post: <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A successful Git branching model</a> with the modification that his <code class=\"language-text\">develop</code> branch is our <code class=\"language-text\">master</code> branch.</p>\n<h3 id=\"git-commit-message\"><a href=\"#git-commit-message\" aria-label=\"git commit message permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Commit Message</h3>\n<p>Taken from a great blog post from <a href=\"http://chris.beams.io/posts/git-commit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chris Beams</a></p>\n<ol>\n<li>Separate subject from body with a blank line</li>\n<li>Capitalize the subject line</li>\n<li>Do not end the subject line with a period</li>\n<li>Use the imperative mood in the subject line</li>\n<li>Use the body to explain what and why vs. how</li>\n<li>Limit the subject line to 50 characters</li>\n<li>Wrap the body at 72 characters</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Summarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequenses of this\nchange? Here&#39;s the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789</code></pre></div>\n<p>Use <code class=\"language-text\">git commit</code> without the <code class=\"language-text\">-m</code> switch to write a commit body.</p>\n<h3 id=\"master-branch\"><a href=\"#master-branch\" aria-label=\"master branch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Master Branch</h3>\n<p>Each commit in the master branch should pass the CI build. Therefore all development should be carried out in a feature/hotfix branch. Once development has been finished and the build passes, it can be merged back into <code class=\"language-text\">master</code>.</p>","fields":{"slug":"/docs/devguide/code_quality/"},"timeToRead":3,"excerpt":"At BioDynaMo we are aiming to develop a high quality software product. The following practices help us to achieve this goal:C++ Styleâ€¦","fileAbsolutePath":"/website/content/biodynamo/doc/dev_guide/code_quality.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/devguide/code_quality/"}}}