{
    "componentChunkName": "component---src-templates-markdown-post-js",
    "path": "/docs/dev_guide/build/",
    "result": {"data":{"site":{"siteMetadata":{"siteUrl":"http://local:8000","title":"BioDynaMo Website","description":"Everything you need to know about agent-based simulations."}},"markdownRemark":{"frontmatter":{"title":"Building Biodynamo","date":"2019-01-01","date_pretty":"01 January, 2019","path":"/docs/dev_guide/build/","meta_title":"BioDynaMo Dev Guide","meta_description":"This is the how to build page.","image":"","next":{"url":"/docs/dev_guide/build/","title":"Building Biodynamo","description":"This is the how to build page."},"sidebar":"devguide","toc":true},"html":"<h2 id=\"first-build-of-biodynamo\" style=\"position:relative;\"><a href=\"#first-build-of-biodynamo\" aria-label=\"first build of biodynamo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First build of BioDynaMo</h2>\n<p>To build BioDynaMo from source execute the following commands:</p>\n<h4><b>Note</b></h4>\n<p>If you are a new BioDynaMo user please follow the <a href=\"https://biodynamo.org/docs/userguide/installation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">installation</a> instructions in our user guide.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token builtin class-name\">cd</span> biodynamo\n\n<span class=\"token comment\"># Install the prerequisites</span>\n./prerequisites.sh all\n\n<span class=\"token comment\"># Create the build directory</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\n\n<span class=\"token comment\"># Build BioDynaMo</span>\ncmake <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span>\n\n<span class=\"token comment\"># (Optional) Installs the libraries</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<p>The script <code class=\"language-text\">prerequisites.sh</code> is used to install all the dependencies needed by BioDynaMo. You will need\nto run it once before actually calling <code class=\"language-text\">cmake</code>. It will choose the specific dependencies depending on the used operating system.\nRun <code class=\"language-text\">./prerequisites.sh --help</code> to see how to use it.</p>\n<h4><b>Note</b></h4>\n<p>On macOS the prerequisites script will use <code class=\"language-text\">brew</code> to install the needed packages.\nIf you do not have <code class=\"language-text\">brew</code> on your system, do yourself a favour and install it.\nPlease have a look in the <a href=\"https://biodynamo.org/docs/userguide/prerequisites/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prerequisites</a> page for more details.</p>\n<h2 id=\"rebuilding-biodynamo\" style=\"position:relative;\"><a href=\"#rebuilding-biodynamo\" aria-label=\"rebuilding biodynamo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rebuilding BioDynaMo</h2>\n<p>If you make developments in the BioDynaMo code you will typically create a new branch and recompile after making your code changes:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> biodynamo\n<span class=\"token function\">git</span> pull\n<span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&lt;</span>new-branch<span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">[</span>edit the files<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># clean the previous build but keep the third party libraries, typically ROOT and ParaView</span>\n<span class=\"token builtin class-name\">cd</span> build\nninja cleanbuild\n\n<span class=\"token comment\"># Build BioDynaMo</span>\ncmake -G Ninja -DCMAKE_BUILD_TYPE<span class=\"token operator\">=</span>Debug <span class=\"token punctuation\">..</span>\nninja</code></pre></div>\n<p>When developing <code class=\"language-text\">ninja</code> is preferred as it is slightly faster than <code class=\"language-text\">make</code>.</p>\n<p>Also we advice you to put the following lines in your <code class=\"language-text\">.bashrc</code> or <code class=\"language-text\">.zshrc</code> file on Linux platforms where we use <code class=\"language-text\">pyenv</code> to manage the different python versions:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.pyenv/bin:<span class=\"token environment constant\">$PATH</span>\"</span>\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>pyenv init -<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<p>Once finished, we hope that you want to contribute your code changes back to the BioDynaMo project.\nFor more info on how to contribute with your code, please consult out guidelines from <a href=\"https://github.com/BioDynaMo/biodynamo/blob/master/doc/dev_guide/contribute.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<h2 id=\"centos-7\" style=\"position:relative;\"><a href=\"#centos-7\" aria-label=\"centos 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CentOS 7</h2>\n<p>For CentOS 7, you will need to run the following commands before actually calling <code class=\"language-text\">cmake</code>.\nThis is because CentOS do not provide by default the correct C++ compilers and the correct python interpreter.\nMoerover, we will need to load the OpenMPI module. You will need to run these instructions only before building BioDynaMo.\nYou will not need them in order to run the program.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">MESA_GL_VERSION_OVERRIDE</span><span class=\"token operator\">=</span><span class=\"token number\">3.3</span>\n<span class=\"token builtin class-name\">.</span> scl_source <span class=\"token builtin class-name\">enable</span> devtoolset-10\n\n<span class=\"token builtin class-name\">.</span> /etc/profile.d/modules.sh\nmodule load mpi</code></pre></div>\n<h2 id=\"cmake-build-options\" style=\"position:relative;\"><a href=\"#cmake-build-options\" aria-label=\"cmake build options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CMake Build Options</h2>\n<p>Our CMake build script uses a few options to influence the build process.\nThey can be set as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake -Doption<span class=\"token operator\">=</span>value <span class=\"token punctuation\">..</span></code></pre></div>\n<p>The value for binary options is <code class=\"language-text\">on</code> or <code class=\"language-text\">off</code>.\nIf you change the value of these switches, you might have to delete <code class=\"language-text\">CMakeCache.txt</code> beforehand.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">test</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>build the test executables; precondition for e.g. <code class=\"language-text\">valgrind</code> and <code class=\"language-text\">coverage</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">dict</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>build ROOT dictionaries. These are compulsory to use backups. Turning them off reduces compilation time.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">paraview</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>Enable visualization using ParaView. Visualization cannot be used if this switch is turned off.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">libgit2</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>Enable automatic git tracking for executed simulations (e.g. last commits and <code class=\"language-text\">git diff</code> outputs; not available on <code class=\"language-text\">CentOS</code>.).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cuda</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>enable CUDA code generation for GPU acceleration</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">opencl</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>enable OpenCL code generation for GPU acceleration</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">valgrind</code></td>\n<td><code class=\"language-text\">on</code></td>\n<td>enable memory leak checks</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">coverage</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>creates a make target to generate a html report indicating which parts of the code are tested by automatic tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">jemalloc</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>use <code class=\"language-text\">jemalloc</code> for memory allocations</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">tcmalloc</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>use <code class=\"language-text\">tcmalloc</code> for memory allocations</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">website</code></td>\n<td><code class=\"language-text\">off</code></td>\n<td>enable website generation (<code class=\"language-text\">make website&lt;-live></code> target (see below for more information))</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"further-cmake-command-line-parameters\" style=\"position:relative;\"><a href=\"#further-cmake-command-line-parameters\" aria-label=\"further cmake command line parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further CMake command line parameters</h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">CMAKE_CXX_FLAGS</code></td>\n<td>specify additional compiler flags - e.g. <code class=\"language-text\">\"-mavx\"</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CMAKE_BUILD_TYPE</code></td>\n<td>specify the build type. Possible values are <code class=\"language-text\">Debug, Release, RelWithDebInfo, MinSizeRel</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"build-targets\" style=\"position:relative;\"><a href=\"#build-targets\" aria-label=\"build targets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build Targets</h2>\n<table>\n<thead>\n<tr>\n<th>Target</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">run-unit-tests</code></td>\n<td>executes all BioDynaMo unit tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">run-valgrind</code></td>\n<td>executes BioDynaMo valgrind tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">run-check</code></td>\n<td>executes both unit and valgrind tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">run-demos</code></td>\n<td>executes all demos and integration tests</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">clean</code></td>\n<td>will clean all targets, also the external projects</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cleanbuild</code></td>\n<td>will clean everything in the build directory, except for third_party (useful for avoiding downloading third party software)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bdmclean</code></td>\n<td>will only clean the <code class=\"language-text\">biodynamo</code> and <code class=\"language-text\">runBiodynamoTests*</code> targets</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">testbdmclean</code></td>\n<td>will only clean the <code class=\"language-text\">runBiodynamoTests*</code> target</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">doc</code></td>\n<td>will generate the API, user and developer documentation in directory <code class=\"language-text\">build/doc</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">coverage</code></td>\n<td>will execute the test target and generate a coverage report in <code class=\"language-text\">build/coverage</code>. Make sure that <code class=\"language-text\">kcov</code> are installed and configure cmake with <code class=\"language-text\">cmake -Dcoverage=on ..</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">coverage-build</code></td>\n<td>same as <code class=\"language-text\">make coverage</code>, but builds it in a separate directory (<code class=\"language-text\">build/coverage</code>). Since building the coverage report requires different compiler flags, building it in a separate directory keeps the current build directory in good order.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"c-code-style-related-build-targets\" style=\"position:relative;\"><a href=\"#c-code-style-related-build-targets\" aria-label=\"c code style related build targets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ Code Style Related Build Targets</h3>\n<p>The following targets are only available if <code class=\"language-text\">clang-format</code>, <code class=\"language-text\">clang-tidy</code> and <code class=\"language-text\">git</code> are installed.</p>\n<p>Build targets indicated with <code class=\"language-text\">*</code> always come in three different flavors.</p>\n<ul>\n<li><code class=\"language-text\">no-suffix</code>: executes the target on source files that changed compared to origin/master -- e.g. <code class=\"language-text\">make check-format</code></li>\n<li><code class=\"language-text\">-staged</code>: executes the target on source files that have been staged -- e.g. <code class=\"language-text\">make check-format-staged</code></li>\n<li><code class=\"language-text\">-all</code>: executes the target on all source files in the project -- e.g. <code class=\"language-text\">make check-format-all</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Target</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">check-format*</code></td>\n<td>run clang-format on selected files. Fails if any file needs to be reformatted</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">show-format*</code></td>\n<td>run clang-format on selected files and display differences</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">format*</code></td>\n<td>run clang-format on selected files and update them in-place</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">check-tidy*</code></td>\n<td>run clang-tidy on selected files. Fails if errors are found</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">show-tidy*</code></td>\n<td>run clang-tidy on selected files and display errors.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">tidy*</code></td>\n<td>run clang-tidy on selected files and attempt to fix any warning automatically</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">check-cpplint*</code></td>\n<td>run cpplint on selected files. Fails if errors are found and displays them.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">check-submission</code></td>\n<td>will build, run all tests, check formatting, code style, and generate documentation and coverage report</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">fix-submission</code></td>\n<td>will attempt to fix the reported issues using <code class=\"language-text\">clang-format</code> and <code class=\"language-text\">clang-tidy</code>. Failing build, tests, compiler warnings, issues from cpplint and warnings from doxygen must be fixed manually. Also some <code class=\"language-text\">clang-tidy</code> issues cannot be resolved automatically</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"website-related-build-targets\" style=\"position:relative;\"><a href=\"#website-related-build-targets\" aria-label=\"website related build targets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Website Related Build Targets</h3>\n<table>\n<thead>\n<tr>\n<th>Target</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">website</code></td>\n<td>will generate the static files used for biodynamo.org</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">website-live</code></td>\n<td>starts a local web server so you can immediately view the website in the browser. The website is automatically reloaded if you change a source file.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"advanced-build-options\" style=\"position:relative;\"><a href=\"#advanced-build-options\" aria-label=\"advanced build options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Build Options</h2>\n<h4 id=\"use-a-custom-compiler\" style=\"position:relative;\"><a href=\"#use-a-custom-compiler\" aria-label=\"use a custom compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use a Custom Compiler</h4>\n<p>If you need to user a custom compilers (instead of the one automatically detected by BioDynaMo) you will need to set the variables: <code class=\"language-text\">CXX</code> for the C++ compiler and <code class=\"language-text\">CC</code> for the C compiler.\nPlease not that your custom compiler must support the C++17 standard and must be compatible with OpenMP.\nThe complete procedure will become:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token builtin class-name\">cd</span> biodynamo\n\n<span class=\"token comment\"># Let's say I want to use a custom version of clang</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CXX</span><span class=\"token operator\">=</span>/opt/local/bin/clang++-mp-8.0\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">C</span><span class=\"token operator\">=</span>/opt/local/bin/clang++-mp-8.0\n\n./install.sh</code></pre></div>\n<h4 id=\"use-a-specific-root--paraview-installation\" style=\"position:relative;\"><a href=\"#use-a-specific-root--paraview-installation\" aria-label=\"use a specific root  paraview installation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use a Specific ROOT / ParaView Installation</h4>\n<p>When you want to inform BioDynaMo of a specific installation of ROOT and /or ParaView on your system,\nyou will need to perform the following instructions prior to installation.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/BioDynaMo/biodynamo.git\n<span class=\"token builtin class-name\">cd</span> biodynamo\n\n<span class=\"token comment\"># For ROOT</span>\n<span class=\"token builtin class-name\">source</span> <span class=\"token operator\">&lt;</span>root_installation_dir<span class=\"token operator\">></span>/bin/thisroot.sh\n\n<span class=\"token comment\"># For ParaView</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ParaView_DIR</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>paraview_installation_dir<span class=\"token operator\">></span>/lib/cmake/paraview-5.8\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">Qt5_DIR</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>qt5_installation_dir<span class=\"token operator\">></span>/lib/cmake/Qt5\n\n./install.sh</code></pre></div>\n<h4><b>Note</b></h4>\n<p>If you specify <code class=\"language-text\">ParaView_DIR</code>, then you will need to provide also the <code class=\"language-text\">Qt5_DIR</code> variable as well.\nThis is because ParaView implicitly relies on the Qt5 installation.</p>\n<h4 id=\"speed-up-installation-tests-with-a-local-biodynamo-lfs-copy\" style=\"position:relative;\"><a href=\"#speed-up-installation-tests-with-a-local-biodynamo-lfs-copy\" aria-label=\"speed up installation tests with a local biodynamo lfs copy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Speed Up Installation Tests with a Local BioDynaMo-LFS Copy</h4>\n<p>The installation scripts fetch large precompiled dependencies like ROOT or ParaView\nfrom biodynamo's large file storage (LFS). To enable faster builds you can download the whole\nLFS and tell BioDynaMo to access the local version instead. This is done with the\nenvironmental flag <code class=\"language-text\">BDM_LOCAL_LFS</code>. Use an absolute path to the directory\nthat contains the local copy.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BDM_LOCAL_LFS</span><span class=\"token operator\">=</span>/path/to/local/lfs</code></pre></div>\n<p>If you want to download the files from remote LFS again execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unset</span> BDM_LOCAL_LFS</code></pre></div>\n<h4><b>Warning</b><h4>\n<p>At the moment there is no check if the local copy is in synch with remote.\nYou have to ensure that yourself!</p>","fields":{"slug":"/docs/dev_guide/build/"},"timeToRead":8,"excerpt":"First build of BioDynaMo To build BioDynaMo from source execute the following commands: If you are a new BioDynaMo user please follow the…","fileAbsolutePath":"/website/content/biodynamo/doc/dev_guide/build.md"}},"pageContext":{"slug":"/docs/dev_guide/build/"}},
    "staticQueryHashes": []}