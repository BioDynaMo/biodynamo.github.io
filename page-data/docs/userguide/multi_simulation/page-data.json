{
    "componentChunkName": "component---src-templates-markdown-post-js",
    "path": "/docs/userguide/multi_simulation/",
    "result": {"data":{"site":{"siteMetadata":{"siteUrl":"http://local:8000","title":"BioDynaMo Website","description":"Everything you need to know about agent-based simulations."}},"markdownRemark":{"frontmatter":{"title":"BioDynaMo Multi Simulation","date":"2021-11-18","date_pretty":"18 November, 2021","path":"/docs/userguide/multi_simulation/","meta_title":"BioDynaMo User Guide","meta_description":"Information about BioDynaMo Multi Simulation runtime","image":"","next":null,"sidebar":"userguide","toc":true},"html":"<h1 id=\"multi-simulation-what-and-why\" style=\"position:relative;\"><a href=\"#multi-simulation-what-and-why\" aria-label=\"multi simulation what and why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Simulation: What and Why?</h1>\n<p>With BioDynaMo it is possible to run multiple simulations in parallel, as\nseparate processes. We refer to this as \"Multi Simulation\". This can be a\nuseful feature when you want to repeat a certain simulation multiple times;\npossibly with different runtime parameters. Instead of running the simulations\nconsecutively, with Multi Simulation it is possible to run multiple instances simultaneously, on one or more machines. This allows you to explore a parameter\nspace and obtain results at a much faster pace. The more computing resources are\navailable, the faster the simulations are completed.\nBioDynaMo offers a couple of default algorithms on exploring a parameter space (e.g. parameter sweep, particle swarm).\nThe algorithms benefit from Multi Simulation by running each iteration in a separate process.</p>\n<h2 id=\"mpi\" style=\"position:relative;\"><a href=\"#mpi\" aria-label=\"mpi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MPI</h2>\n<p>Multi Simulation uses MPI to spawn different processes and schedule the\nsimulations on your system(s).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">If you work with more than one machine, you are required to have the\nsame OpenMPI versions installed on all the machines in order for Multi Simulation to work properly.\n\nFurthermore, MPI requires you to have a passwordless SSH login to the other machines.</code></pre></div>\n<h2 id=\"how-to-use-multi-simulation\" style=\"position:relative;\"><a href=\"#how-to-use-multi-simulation\" aria-label=\"how to use multi simulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use Multi Simulation</h2>\n<p>In order to run a simulation in Multi Simulation mode, you need to make a few changes.</p>\n<h3 id=\"main-function\" style=\"position:relative;\"><a href=\"#main-function\" aria-label=\"main function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main function</h3>\n<p>In the <code class=\"language-text\">main</code> function of your simulation you need to call the <code class=\"language-text\">MultiSimulation</code> wrapper\naround your regular <code class=\"language-text\">Simulate</code> call:</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int main(int argc, const char** argv) {\n  bdm::experimental::MultiSimulation pe(argc, argv);\n  return pe.Execute(Simulate);\n}</code></pre></div>\n<h3 id=\"simulate-function\" style=\"position:relative;\"><a href=\"#simulate-function\" aria-label=\"simulate function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simulate function</h3>\n<p>Your <code class=\"language-text\">Simulate</code> function also should conform to the following signature in order to use Multi Simulation:</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">void Simulate(int argc, const char** argv, TimeSeries* result,\n                     Param* final_params = nullptr) {\nauto set_param = [&amp;](Param* param) {\n    param-&gt;Restore(std::move(*final_params));\n};\nSimulation simulation(argc, argv, set_param);\n\n// Your simulation code...\n}</code></pre></div>\n<p><code class=\"language-text\">result</code> is a <code class=\"language-text\">TimeSeries</code> object that can be populated with results that are of interest in your simulation.\nFor some optimization algorithms, like ParticleSwarm, this <em>must</em> be populated with such results to be able to minimize the error between simulated data and real-life data.</p>\n<p><code class=\"language-text\">final_params</code> are the unique set of parameters that a simulation instance receives from the Multi Simulation runtime. You must therefore configure your simulation with these parameters <em>before</em> you define your simulation using the <code class=\"language-text\">Restore</code> functionality.</p>\n<h3 id=\"optimization-parameters\" style=\"position:relative;\"><a href=\"#optimization-parameters\" aria-label=\"optimization parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimization parameters</h3>\n<p>The Multi Simulation runtime expects you to define which parameter space exploration algorithm you want to use.\nThis can be done by defining a <code class=\"language-text\">OptimizationParam</code> in your parameter configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"bdm::OptimizationParam\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"algorithm\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;algorithm name>\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"params\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"_typename\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;parameter type>\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"param_name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;parameter name>\"</span><span class=\"token punctuation\">,</span>\n        ...\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">algorithm</code> should be the name of the algorithm you wish to use (e.g. \"ParameterSweep\", \"ParticleSwarm\")</li>\n<li>\n<p>The <code class=\"language-text\">params</code> should be a list of simulation parameters you wish to explore. In the code block above, there is only one parameter block, but this can be a comma-separated list of multiple parameter blocks.</p>\n<ul>\n<li>The <code class=\"language-text\">_typename</code> should be the type of parameter it concerns (e.g. a uniform range of parameters, a set of parameters). See \"core/multi_simulation/optimization_param_type\" for a list of available parameter types</li>\n<li>The <code class=\"language-text\">param_name</code> should be the name of the parameter in your simulation, including any namespace identifiers (e.g. \"bdm::SimParam::my_param\")</li>\n<li>Each parameter type has a number of extra fields that need to be filled in. For example, for a RangeParam (a uniform range of values), you would also need to specify the <code class=\"language-text\">lower_bound</code>, <code class=\"language-text\">upper_bound</code> and <code class=\"language-text\">stride</code> in its parameter block.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"command-line-execution\" style=\"position:relative;\"><a href=\"#command-line-execution\" aria-label=\"command line execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command line execution</h3>\n<p>Since Multi Simulation relies on MPI, we must use the <code class=\"language-text\">mpirun</code> binary to run the simulation with</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ mpirun -np &lt;N&gt; &lt;your_simulation_binary&gt; --config=param.json</code></pre></div>\n<p><code class=\"language-text\">param.json</code> contains the optimization parameter information as described earlier (this can also instead be inlined with the <code class=\"language-text\">inline-config</code> command line argument).</p>\n<p>This command spawns <code class=\"language-text\">N-1</code> number of processes that each will start a\nsimulation (<code class=\"language-text\">N-1</code> because one process is always reserved as the managing process). The number of simulations that will eventually be performed depends\non your optimization algorithm: the more parameters you would like to explore,\nthe higher the number of simulations that need to be executed.</p>\n<p>It is very likely that the total number of simulations will be greater than <code class=\"language-text\">N-1</code>. Since\nthere can only be at most <code class=\"language-text\">N-1</code> simulation running at any given point in time,\nthe other simulations are queued, and scheduled to be executed whenever\ncomputing resources become available.</p>\n<p>If you wish to run your simulations on multiple machines (e.g. a cluster, or cloud instances), it\ncan simply be done as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ mpirun -np &lt;N&gt; --hostfile &lt;path/to/hostfile&gt; &lt;your_simulation_binary&gt; --config=param.json</code></pre></div>\n<p>The <code class=\"language-text\">hostfile</code> should contain the names (e.g. IP addresses) of the machines in\nyour cluster. For detailed information on how to create a hostfile, please check\nout the OpenMPI docs <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<h3 id=\"performance-tuning\" style=\"position:relative;\"><a href=\"#performance-tuning\" aria-label=\"performance tuning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance tuning</h3>\n<p>Since we rely on MPI to distribute the simulation workloads over a specified\nnumber of processes, we are able to finetune the performance through the many\noptions that come with the MPI implementation. Important for the performance of\nmulti-threaded applications is being able to tweak the number of threads that\neach process is able to spawn, the thread affinity, and other related\nparameters. These parameters are conveniently described online <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://www.open-mpi.org/faq/?category=running#mpirun-hostfile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.open-mpi.org/faq/?category=running#mpirun-hostfile</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p><a href=\"https://www.open-mpi.org/doc/v3.0/man1/mpirun.1.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.open-mpi.org/doc/v3.0/man1/mpirun.1.php</a></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/docs/userguide/multi_simulation/"},"timeToRead":5,"excerpt":"Multi Simulation: What and Why? With BioDynaMo it is possible to run multiple simulations in parallel, as\nseparate processes. We refer to…","fileAbsolutePath":"/website/content/biodynamo/doc/user_guide/multi_simulation.md"}},"pageContext":{"slug":"/docs/userguide/multi_simulation/"}},
    "staticQueryHashes": []}