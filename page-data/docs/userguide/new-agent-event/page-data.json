{"componentChunkName":"component---src-templates-markdown-post-js","path":"/docs/userguide/new-agent-event/","webpackCompilationHash":"3d3ed4a2e32a0c71d021","result":{"data":{"site":{"siteMetadata":{"siteUrl":"http://local:8000","title":"BioDynaMO Website","description":"Everything you need to know about biology simulations."}},"markdownRemark":{"frontmatter":{"title":"NewAgentEvent","date":"2019-01-01","date_pretty":"01 January, 2019","path":"/docs/userguide/new-agent-event/","meta_title":"BioDynaMo User Guide","meta_description":"This page explains NewAgentEvents.","image":null,"next":{"url":"/docs/userguide/new-agent-event/","title":"Event","description":"This is the event page."},"sidebar":"userguide","toc":true},"html":"<p>If a new agent (e.g. Cell) is created during a simulation we denote\nit as a NewAgentEvent.</p>\n<p>An example is cell division: A mother cell splits into two daughter cells. By\nour definition the already existing mother cell is modified to become the first\ndaughter cell. The second daughter cell must be created.</p>\n<p>Further examples are:</p>\n<ul>\n<li>Neurite elongation</li>\n<li>Neurite branching</li>\n<li>Neurite bifurcation</li>\n<li>...</li>\n</ul>\n<h2 id=\"stages\"><a href=\"#stages\" aria-label=\"stages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stages</h2>\n<p>An event has two stages:</p>\n<ol>\n<li>Create new agent(s)</li>\n<li>Modify the agent which triggered the event; the existing agent.</li>\n</ol>\n<h2 id=\"cell-division-example\"><a href=\"#cell-division-example\" aria-label=\"cell division example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cell Division Example</h2>\n<p>Letâ€˜s take the cell division event as an example and walk through these steps.</p>\n<h3 id=\"event-trigger\"><a href=\"#event-trigger\" aria-label=\"event trigger permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event trigger</h3>\n<p>A call to <code class=\"language-text\">cell.Divide()</code> triggers the event.</p>\n<h3 id=\"step-1-create-daughter-2\"><a href=\"#step-1-create-daughter-2\" aria-label=\"step 1 create daughter 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create daughter 2</h3>\n<p>A new cell will be created using the default constructor of <code class=\"language-text\">Cell</code>.\nAfterwards, the <code class=\"language-text\">Initialize(const NewAgentEvent&amp; event)</code> method is called for the new cell.</p>\n<p>The class <code class=\"language-text\">CellDivisionEvent</code> contains the parameters to perform a cell division.\nThe base class <code class=\"language-text\">NewAgentEvent</code> contains pointers to the existing agent and to\nall new created agent.\nThis information is sufficient to initialize all attributes of the new daughter cell.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">GetUid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CellDivisionEvent<span class=\"token operator\">::</span>kUid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> mother <span class=\"token operator\">=</span> bdm_static_cast<span class=\"token operator\">&lt;</span>Cell<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>existing_agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> cde <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> CellDivisionEvent<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  volume_ <span class=\"token operator\">=</span> mother<span class=\"token operator\">-></span><span class=\"token function\">GetVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cde<span class=\"token punctuation\">.</span>volume_ratio`<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"step-2-modify-existing-agent\"><a href=\"#step-2-modify-existing-agent\" aria-label=\"step 2 modify existing agent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Modify existing agent</h3>\n<p>Currently the existing <code class=\"language-text\">cell</code> is still in the state before the division (= mother).\nNow, we have to modify it to transform it into daughter 1.\nFor instance the original volume must be adjusted such that (<code class=\"language-text\">volume_mother = volume_daughter_1 + volume_daughter_2</code>).\nThis is performed in the <code class=\"language-text\">Update(const NewAgentEvent&amp; event)</code> function.\nIt could look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">GetUid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CellDivisionEvent<span class=\"token operator\">::</span>kUid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> daughter_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>Cell<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>new_agents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  volume_ <span class=\"token operator\">-=</span> daughter_2<span class=\"token operator\">-></span><span class=\"token function\">GetVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- TODO events and behaviors -->\n<h2 id=\"extending-agents\"><a href=\"#extending-agents\" aria-label=\"extending agents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending Agents</h2>\n<p>This architecture is important to support extension of agents.\nLet's assume that you extend the Cell class to add a new data member\n<code class=\"language-text\">my_new_data_member_</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCell</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Cell <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">double</span> my_new_data_member_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you have to tell BioDynaMo what the value of <code class=\"language-text\">new_data_member_</code> should be\nfor daughter 1 and daughter 2 in case your cell divides. You can do that by\noverriding the functions <code class=\"language-text\">void Initialize(const NewAgentEvent&amp; event)</code> and\n<code class=\"language-text\">void Update(const NewAgentEvent&amp; event)</code>.\nLet's assume that <code class=\"language-text\">new_data_member_</code> of the mother cell is divided between\nthe daughters according to the volume ratio defined in <code class=\"language-text\">CellDivisionEvent</code>.</p>\n<p>The function <code class=\"language-text\">Initialize</code> initializes <code class=\"language-text\">new_data_member_</code> for daughter 2.\nThe function <code class=\"language-text\">Update</code> performs the transition from mother to daughter 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCell</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Cell <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  \n  <span class=\"token function\">MyCell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">void</span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> NewAgentEvent<span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n    Base<span class=\"token operator\">::</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">GetUid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CellDivisionEvent<span class=\"token operator\">::</span>kUid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> mother <span class=\"token operator\">=</span> bdm_static_cast<span class=\"token operator\">&lt;</span>Cell<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>existing_agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> cde <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> CellDivisionEvent<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      new_data_member_ <span class=\"token operator\">-=</span> mother<span class=\"token operator\">-></span>new_data_member_ <span class=\"token operator\">*</span> cde<span class=\"token punctuation\">.</span>volume_ratio<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> NewAgentEvent<span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n    Base<span class=\"token operator\">::</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">GetUid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CellDivisionEvent<span class=\"token operator\">::</span>kUid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> daughter_2 <span class=\"token operator\">=</span> bdm_static_cast<span class=\"token operator\">&lt;</span>Cell<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>new_agents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      new_data_member_ <span class=\"token operator\">-=</span> daughter_2<span class=\"token operator\">-></span>new_data_member_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">double</span> my_new_data_member_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<a class=\"sbox\" target=\"_blank\" rel=\"noopener\">\n    <div class=\"sbox-content\">\n      <h4><b>CAUTION</b></h4>\n      <p>Do not forget to forward the call of Initialize and Update to the base class.\n     Failing to do so will cause errors.\n    </p>\n    </div>\n</a>\n<p>You can ommit the implementaiont of <code class=\"language-text\">Initialize</code> and/or <code class=\"language-text\">Update</code> if your\nnew data member, doesn't need this type of initialization.</p>\n<!-- TODO explain default event handler and ctors -->\n<h2 id=\"additional-notes\"><a href=\"#additional-notes\" aria-label=\"additional notes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional Notes</h2>\n<ul>\n<li>NewAgentEvents can create more than one agent. e.g. NeuriteBranchingEvent</li>\n<li>The type of the existing agent that triggers the event and the newly created\nagent can be different. e.g. NewNeuriteExtensionEvent</li>\n</ul>","fields":{"slug":"/docs/userguide/new-agent-event/"},"timeToRead":3,"excerpt":"If a new agent (e.g. Cell) is created during a simulation we denote\nit as a NewAgentEvent.An example is cell division: A mother cell splitsâ€¦","fileAbsolutePath":"/website/content/biodynamo/doc/user_guide/new_agent_event.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/userguide/new-agent-event/"}}}