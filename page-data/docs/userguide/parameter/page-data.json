{"componentChunkName":"component---src-templates-markdown-post-js","path":"/docs/userguide/parameter/","webpackCompilationHash":"a45bdec9fbd4b83c84c6","result":{"data":{"site":{"siteMetadata":{"siteUrl":"http://local:8000","title":"BioDynaMO Website","description":"Everything you need to know about biology simulations."}},"markdownRemark":{"frontmatter":{"title":"Parameter","date":"2019-01-01","date_pretty":"01 January, 2019","path":"/docs/userguide/parameter/","meta_title":"BioDynaMo User Guide","meta_description":"This is the parameter page.","image":"","next":null,"sidebar":"userguide","toc":true},"html":"<p>Parameters are used to tailor BioDynaMo to your specific simulation.</p>\n<p>The majority of parameters are defined in the <a href=\"/api/structbdm_1_1Param.html\">core engine</a>.\nEach simulation or module can define its own <a href=\"/api/structbdm_1_1experimental_1_1neuroscience_1_1Param.html\"><code class=\"language-text\">Param</code> class</a> to add additional parameters.</p>\n<p>There are three ways to set the value of a parameter:</p>\n<ol>\n<li>TOML/JSON configuration file</li>\n<li>Command line argument</li>\n<li>Assignment in the source code.</li>\n</ol>\n<br/>\n<a class=\"sbox\" target=\"_blank\" rel=\"noopener\">\n    <div class=\"sbox-content\">\n      <h4><b>Note</b></h4>\n      <p>Higher index takes precedence.  E.g. If you define the <code>backup_file</code> in the TOML/JSON file and the\n    command line parameter, the command line version will be used.\n    </p>\n    </div>\n</a>\n<p>The documentation of each parameter contains a description of the\nparameter, its default value and how to set it in the TOML file (<a href=\"/api/structbdm_1_1Param.html#a13d24f045335b7ac62a091f56c6fe166\">example</a>)</p>\n<p>The following code snippet shows how to access a parameter in your\nsimulation.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> param <span class=\"token operator\">=</span> Simulation<span class=\"token operator\">::</span><span class=\"token function\">GetActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> param<span class=\"token operator\">-></span>simulation_time_step_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> param<span class=\"token operator\">-></span>GetModuleParam<span class=\"token operator\">&lt;</span>neuroscience<span class=\"token operator\">::</span>Param<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>neurite_max_length_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"configuration-file\"><a href=\"#configuration-file\" aria-label=\"configuration file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration File</h3>\n<p>This is the recommended way to set runtime variables.\nBioDynaMo supports configuration files in <a href=\"https://toml.io/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TOML</a>\nor <a href=\"https://tools.ietf.org/html/rfc7386\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON merge patch</a> format.</p>\n<p>Here you can find a tutorial about the usage of <a href=\"/docs/userguide/simulation_parameter_tutorial\">simulation parameters</a></p>\n<h4 id=\"toml\"><a href=\"#toml\" aria-label=\"toml permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TOML</h4>\n<p>Create a file <code class=\"language-text\">bdm.toml</code>\nin the working directory and add your configuration. You can find a sample below:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">visualization</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">export</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">visualize_sim_object</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Cell\"</span>\n<span class=\"token key property\">additional_data_members</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token table class-name\">\"density_\"</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"json\"><a href=\"#json\" aria-label=\"json permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON</h4>\n<p>Create a file <code class=\"language-text\">bdm.json</code>\nin the working directory and add your configuration. You can find a sample below:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"bdm::Param\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"export_visualization_\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visualize_sim_objects_\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Cell\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"density_\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"command-line-options\"><a href=\"#command-line-options\" aria-label=\"command line options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command Line Options</h3>\n<p>Some parameter can be set as command line argument when you start the simulation.\nFor a complete list execute the binary with the <code class=\"language-text\">--help</code> switch. e.g. <code class=\"language-text\">./cell_division --help</code>.</p>\n<p>Sample output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-- BioDynaMo command line options\n\nUsage:\n  ./cell_division [OPTION...]\n\n Core options:\n  -h, --help                    Print this help message.\n      --version                 Print version number of BioDynaMo.\n      --opencl                  Enable GPU acceleration through OpenCL.\n      --cuda                    Enable GPU acceleration through CUDA.\n  -v, --verbose                 Verbose mode. Causes BioDynaMo to print\n                                debugging messages. Multiple -v options increases\n                                the verbosity. The maximum is 3.\n  -r, --restore FILE            Restores the simulation from the checkpoint\n                                found in FILE and continues simulation from\n                                that point. (default: )\n  -b, --backup FILE             Periodically create full simulation backup to\n                                the specified file. NOTA BENE: File will be\n                                overriden if it exists. (default: )\n  -c, --config FILE             The TOML or JSON configuration that should be\n                                used. The JSON file must be in JSON merge\n                                patch format\n                                (https://tools.ietf.org/html/rfc7386) (default: )\n      --inline-config JSON_STRING\n                                JSON configuration string passed directly on\n                                the command line. Overwrites values specified\n                                in config file.  The JSON string must be in\n                                JSON merge patch format\n                                (https://tools.ietf.org/html/rfc7386) (default: )\n      --output-default-json     Prints a JSON string with all parameters and\n                                their default values and exits.\n      --toml-to-json TOML_FILE  Converts a TOML file to a JSON patch. After\n                                printing the JSON patch the application will\n                                exit. (default: )</code></pre></div>\n<p>You can append your own command line options as following (e.g. <code class=\"language-text\">num-cells</code> as\nshow in the sample above):</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> opts <span class=\"token operator\">=</span> <span class=\"token function\">CommandLineOptions</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nopts<span class=\"token punctuation\">.</span>AddOption<span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n, num-cells\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The total number of cells\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You will need to pass this object to the main Simulation object as follows:</span>\nSimulation <span class=\"token function\">simulation</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// To retrieve the values from the command line in your simulation code</span>\n<span class=\"token keyword\">auto</span> parser <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">uint64_t</span> num_cells <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num-cells\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">AddOption</code> function can be broken down as follows: The template parameter\n(<code class=\"language-text\">uint64_t</code>) specifies what value type your option should be. The first fucntion\nparameter is for the flag abbreviation (in this case -n and --num-cells) The\nsecond parameter is the name of your command line option The third parameter is\nthe description (as shown in the help dialogue) The fourth parameter is the\ndefault value of the command line option (i.e. when you do not specify the\nflag).</p>\n<h3 id=\"assignment-in-the-source-code\"><a href=\"#assignment-in-the-source-code\" aria-label=\"assignment in the source code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignment in the Source Code</h3>\n<p>You can also set a runtime parameter in the source code. You have to recompile\nyour simulation though.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> set_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Param<span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create an artificial bound for the simulation space</span>\n  param<span class=\"token operator\">-></span>bound_space_ <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  param<span class=\"token operator\">-></span>min_bound_ <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  param<span class=\"token operator\">-></span>max_bound_ <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">;</span>\n  param<span class=\"token operator\">-></span>run_mechanical_interactions_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSimulation <span class=\"token function\">simulation</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> set_param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You have to create a lambda and pass it to the constructor of <code class=\"language-text\">Simulation</code>.\nAfterwards, <code class=\"language-text\">Simulation</code> only returns a const pointer to the parameters. Thus,\nthey cannot be modified.</p>","fields":{"slug":"/docs/userguide/parameter/"},"timeToRead":4,"excerpt":"Parameters are used to tailor BioDynaMo to your specific simulation.The majority of parameters are defined in the core engine.\nEach…","fileAbsolutePath":"/website/content/biodynamo/doc/user_guide/parameter.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/userguide/parameter/"}}}