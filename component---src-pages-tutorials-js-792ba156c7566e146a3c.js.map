{"version":3,"sources":["webpack:///./src/components/tutorials/TutorialBox.js","webpack:///./src/pages/tutorials.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["TutorialBox","src","to","href","headingClass","title","children","binder","html","className","radius","Spirit","h2","p","align","target","greybutton","greenbutton","propTypes","PropTypes","node","isRequired","string","Tutorials","data","location","imageUrl","getMetaImageUrls","type","description","image","mainClass","bodyClass","page","xl","sectionHeading","sectionSubHeading","notebooks","edges","map","edge","relativePath","name","charAt","toUpperCase","slice","replace","shape","site","siteMetadata","siteUrl","pathname","tutorialsQuery","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","excerpt","rel","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","object","tags","arrayOf","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","url","resolve","SITEURL","process","imageUrls","faq","integrations","tutorials","default","section","proptypes"],"mappings":"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","file":"component---src-pages-tutorials-js-792ba156c7566e146a3c.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Box } from '../common'\nimport { Spirit } from '../../styles/spirit-styles'\nconst TutorialBox = ({ src, to, href, headingClass, title, children, binder, html }) => (\n    <Box\n        to={to}\n        href={href}\n        className=\"col-12 col-6-ns col-4-l pa8 tdn middarkgrey gallery-box-min-height gallery-box-max-height\"\n        radius=\"4\"\n    >\n        <h2 className={`${Spirit.h2} darkgrey ${headingClass}`}>{title}</h2>\n        <img src={src} className=\"gallery-img mt2\"/>\n        <div className={`${Spirit.p} mt2 midgrey`}>{children}</div>\n        <div align='center'>\n            <br/>\n            <a href={html} target=\"_blank\" > <button className={`${Spirit.greybutton}`}><b>View now</b></button></a>\n            <br/>\n            <a href={binder} target=\"_blank\" > <button className={`${Spirit.greenbutton}`}><b>Run now</b></button></a>\n      </div>\n    </Box>\n)\n\nTutorialBox.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired,\n    binder: PropTypes.string,\n    to: PropTypes.string,\n    href: PropTypes.string,\n}\n\nexport default TutorialBox\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport { Layout } from '../components/common/layout'\nimport { Spirit } from '../styles/spirit-styles'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\nimport { TutorialBox } from '../components/tutorials'\n\nconst Tutorials = ({ data, location }) => {\n    const title = `Tutorials`\n    const description = `This is the tutorials page.`\n    const imageUrl = getMetaImageUrls()\n\n    return (\n\t\t<>\n\t\t\t<MetaData\n\t\t\t    data={data}\n\t\t\t    location={location}\n\t\t\t    title={title}\n\t\t\t    type=\"website\"\n\t\t\t    description={description}\n\t\t\t    image={imageUrl}\n\t\t\t/>\n\t\t\t<Layout mainClass=\"bg-whitegrey-l2 pb-vw3\" bodyClass=\"bg-white\">\n\n\t\t\t    <div className=\"bg-concepts\">\n\t\t\t        <div className={`${Spirit.page.xl} pt12 pb4 pt-vw1-ns pb-vw1-ns white pl10 pl0-ns`}>\n                    <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}> <Link to=\"/tutorials/\" className=\"link dim white\">{title}</Link></h1>              \n                        <p className={Spirit.sectionSubHeading}>\n                    This is a gallery of basic example <strong><Link to=\"/docs/userguide/notebook\" className=\"link dim white\">BioDynaMo notebooks:</Link></strong> click on the images to inspect the underlying document.\n                        </p>\n\t\t\t        </div>\n\t\t\t    </div>\n\n\t\t\t    <div className={`${Spirit.page.xl} mt-vw3`}>\n\n\t\t\t        <section className=\"grid-12 gutter-row-20 gutter-20-ns gutter-36-l\">\n\n\t\t\t            {\n\t\t\t                data.notebooks.edges.map(edge => (\n                                <TutorialBox \n                                html={\"/notebooks/\"+edge.node.relativePath}\n                                title={edge.node.name.charAt(0).toUpperCase()+edge.node.name.slice(1).replace(\"_\", \" \")} \n                                src={\"/images/notebooks/\"+edge.node.name+\".png\"}\n                                binder={\"https://mybinder.org/v2/gh/BioDynaMo/binder-demo/dockerfile?filepath=%2F\"+edge.node.name+\"%2F\"+edge.node.name+\".ipynb\"}>\n\t\t\t                    </TutorialBox>\n\t\t\t                ))\n\t\t\t            }\n\t\t\t        </section>\n\n\t\t\t    </div>\n\n\t\t\t</Layout>\n\t\t</>\n    )\n}\n\nTutorials.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default Tutorials\n\nexport const tutorialsQuery = graphql`\n    query {\n        site {\n            ...SiteMetaFields\n        }\n        notebooks: allFile(filter: {sourceInstanceName: {eq: \"notebooks\"}, extension: {eq:\"html\"}}) {\n            edges {\n                node {\n                    name\n                    relativePath\n                }\n            }\n        }\n    }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta property=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@ghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"/images/bdm_logo.png\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image=\"/images/bdm_logo.png\"\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.ghost.org`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}