'use strict';

const hbs = require('express-hbs');
const fs = require('fs');
const path = require('path');
const Promise = require('bluebird');

const errors = require('ghost-ignition').errors;
// const logging = require('../logging');
const assetPath = path.resolve('public/icons');
const readDirAsync = Promise.promisify(fs.readdir);

// Register an async handlebars helper for a given handlebars instance
function registerAsyncHelper(name, fn) {
    hbs.registerAsyncHelper(name, function (context, options, cb) {
        // Handle the case where we only get context and cb
        if (!cb) {
            cb = options;
            options = undefined;
        }

        // Wrap the function passed in with a when.resolve so it can return either a promise or a value
        Promise.resolve(fn.call(this, context, options)).then(function (result) {
            cb(result);
        }).catch(function (err) {
            throw new errors.InternalServerError({
                err: err,
                help: 'registerAsyncThemeHelper' + name
            });
        });
    });
}

registerAsyncHelper('get-icons', function (options) {
    let data = hbs.handlebars.createFrame(options.data);

    if (!options.fn) {
        data.error = 'Helper usage error: get-icons is a block helper';
        console.error(data.error); // eslint-disable-line
        return Promise.resolve();
    }

    return readDirAsync(assetPath)
        .then((icons) => {
            icons = icons.map(icon => ({name: icon.replace('.svg', '')}));

            return options.fn(
                {icons: icons},
                {data: data}
            );
        })
        .catch((err) => {
            data.error = err.message;
            console.error(data.error); // eslint-disable-line
            // logging.error(new errors.InternalServerError({
            //     err: err,
            //     help: 'registerAsyncHelper'
            // }));

            return options.inverse(this, {data: data});
        });
});
