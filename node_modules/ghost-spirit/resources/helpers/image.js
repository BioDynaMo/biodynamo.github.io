'use strict';

const hbs = require('express-hbs');
const fs = require('fs');
const path = require('path');

const imageRegex = /(\S*)-(\d{1,10})x.(?:png|jpg|gif|jpeg)/;

let knownSrcsets = {};

hbs.registerAsyncHelper('img', function (opts, cb) {
    var hash = opts.hash || {};
    if (!hash.src) {
        return cb(new Error('Image is misssing (or missing src attribute)'));
    }

    const parsedPath = path.parse(hash.src);
    const ext = parsedPath.ext;

    const imgString = o => new hbs.SafeString(`<img ${Object.keys(o).map(k => `${k}="${o[k]}"`).join(' ')} />`);

    if (knownSrcsets[hash.src]) {
        hash.srcset = knownSrcsets[hash.src];
        return cb(imgString(hash));
    } else if (ext !== '.png' && ext !== '.jpg') {
        return cb(imgString(hash));
    } else {
        const imgDir = path.dirname(path.join(__dirname, '..', 'public', hash.src));
        const imgName = path.parse(hash.src).name;

        fs.readdir(imgDir, (error, files) => {
            files = files || [];

            if (error) {
                return cb(error);
            } else {
                const matchedImgs = files
                    .map((file) => {
                        const parsedImage = file.match(imageRegex) || ['', '', ''];
                        const name = parsedImage[1];
                        const width = parsedImage[2];

                        if (name === imgName) {
                            return {file, width};
                        }
                    })
                    .filter(i => i);
                const srcset = matchedImgs
                    .map(i => `${path.dirname(hash.src)}/${i.file} ${i.width}w`)
                    .join(', ');

                if (srcset) {
                    hash.srcset = srcset;
                }

                hash.src = matchedImgs[0] ? `${path.dirname(hash.src)}/${matchedImgs[0].file}` : hash.src;
                // TODO: not sure if this should be called before the final line?
                cb(imgString(hash));

                knownSrcsets[hash.src] = srcset;
            }
        });
    }
});
