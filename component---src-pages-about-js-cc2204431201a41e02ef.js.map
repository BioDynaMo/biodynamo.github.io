{"version":3,"sources":["webpack:///./src/components/common/team/MemberBox.js","webpack:///./src/pages/about.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["MemberBox","src","to","href","headingClass","name","position","className","radius","Spirit","h5","propTypes","PropTypes","node","string","isRequired","AboutPage","data","location","type","title","description","mainClass","bodyClass","page","xl","h4","h2","excerpt","shape","site","siteMetadata","siteUrl","pathname","pageQuery","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","sameAsArray","length","join","image","profile_image","defaultProps","bool","ImageMeta","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","rel","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","object","tags","arrayOf","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","getMetaImageUrls","timeToRead","number","WebsiteMeta","oneOf","MetaData","url","resolve","SITEURL","process","imageUrls","faq","integrations","tutorials","default","section","proptypes"],"mappings":"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","file":"component---src-pages-about-js-cc2204431201a41e02ef.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Spirit } from '../../../styles/spirit-styles'\nimport { Box } from '../'\n\nconst MemberBox = ({ src, to, href, headingClass, name, position }) => (\n    <Box\n        to={to}\n        href={href}\n        className=\"col-12 col-6-ns col-4-l pa8 tdn middarkgrey setup-box-min-height  team-box-max-width setup-box-max-height\"\n        radius=\"4\"\n    >\n        <div className=\"img-container\">\n            <img src={src} className=\"teampic\"/>\n            <h5 className={`${Spirit.h5} ${headingClass} img-overlay-1`}><span>{name}</span></h5>        \n            <h5 className={`${Spirit.h5} ${headingClass} img-overlay-2`}>{position}</h5>\n        </div>\n    </Box>\n)\n\nMemberBox.propTypes = {\n    position: PropTypes.node,\n    name: PropTypes.string.isRequired,\n    to: PropTypes.string,\n    href: PropTypes.string,\n    headingClass: PropTypes.string,\n}\n\nexport default MemberBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\n\nimport { Spirit } from '../styles/spirit-styles'\nimport { MemberBox } from '../components/common/team'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\nimport { Layout } from '../components/common/layout'\n\nconst AboutPage = ({data,location}) => {\n\tconst title = `About BioDynaMo`\n\tconst description = `Short description of what BioDynaMo is.`\n\n\treturn (\n\t\t<>\n\t\t\t<MetaData\n\t\t\t\tdata={data}\n\t\t\t\tlocation={location}\n\t\t\t\ttype=\"website\"\n\t\t\t\ttitle={title}\n\t\t\t\tdescription={description}\n\t\t\t/>\n\t\t\t<Layout mainClass=\"bg-whitegrey-l2 pb-vw3\" bodyClass=\"bg-white\">\n\n                <div className=\"bg-concepts\">\n                    <div className={`${Spirit.page.xl} pt12 pb4 pt-vw1-ns pb-vw1-ns white pl10 pl0-ns`}>\n                        <h1 className={`${Spirit.h4} gh-integration-header-shadow`}>\n                            <Link to=\"/about/\" className=\"link dim white\">{title}</Link>\n                        </h1>\n                    </div>\n                </div>\n\n                <div className={`${Spirit.page.xl} pb-vw4 pb-vw3-ns pt-vw4 pt-vw3-ns`}>\n\n                    <h2 className={`${Spirit.h2} pt20 nt20`}>\n                    Our Project\n                    </h2>\n\n                    <p className={`${Spirit.excerpt} midgrey-l2 mt2`}>\n                    This is what we do!\n                    </p>\n\n                    <div className=\"mt3\"/>\n\n                    <h2 className={`${Spirit.h2} pt20 nt20`}>\n                    Our Team\n                    </h2>\n\n                    <div className=\"mt5\"/>\n\n                    <section className=\"grid-16 gutter-row-20 gutter-20-ns gutter-36-l\">\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Nathaniel Randomness\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Lead Engineer\">\n                        </MemberBox>\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Member\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Member\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Member\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                    </section>\n\n                    <div className=\"mt5\"/>\n\n                    <h2 className={`${Spirit.h2} pt20 nt20`}>\n                    Our Alumni\n                    </h2>\n\n                    <div className=\"mt5\"/>\n\n                    <section className=\"grid-16 gutter-row-28 gutter-20-ns gutter-36-l\">\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Alumni\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Alumni\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Alumni\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                        <MemberBox\n                            href=\"/\"\n                            name=\"Test Alumni\"\n                            src=\"/bradley.png\"\n                            headingClass=\"mt2\"\n                            position=\"Position\">\n                        </MemberBox>\n\n                    </section>\n\n                </div>\n\n\t    \t</Layout>\n\t    </>\n\t)\n}\n\nAboutPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default AboutPage\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            ...SiteMetaFields\n        }\n    }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta property=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@ghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"/images/bdm_logo.png\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image=\"/images/bdm_logo.png\"\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.ghost.org`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}