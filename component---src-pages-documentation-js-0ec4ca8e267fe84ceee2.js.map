{"version":3,"sources":["webpack:///./src/components/setup/SetupBox.js","webpack:///./src/pages/documentation.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["SetupBox","to","href","icon","iconClass","headingClass","title","children","className","radius","name","Spirit","h4","small","propTypes","PropTypes","node","isRequired","string","DocPage","data","location","imageUrl","getMetaImageUrls","type","description","image","mainClass","bodyClass","page","xl","sectionHeading","shape","site","siteMetadata","siteUrl","pathname","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","excerpt","rel","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","object","tags","arrayOf","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","url","resolve","SITEURL","process","imageUrls","faq","integrations","tutorials","default","section","proptypes"],"mappings":"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","file":"component---src-pages-documentation-js-0ec4ca8e267fe84ceee2.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Box, Icon } from '../common'\nimport { Spirit } from '../../styles/spirit-styles'\n\nconst SetupBox = ({ to, href, icon, iconClass, headingClass, title, children }) => (\n    <Box\n        to={to}\n        href={href}\n        className=\"col-12 col-6-ns col-4-l pa8 tdn middarkgrey setup-box-min-height\"\n        radius=\"4\"\n    >\n        <Icon name={icon} className={iconClass} />\n        <h4 className={`${Spirit.h4} darkgrey ${headingClass}`}>{title}</h4>\n        <div className={`${Spirit.small} mt1 midgrey`}>{children}</div>\n        <span className={`black dib mt2 link fw5 f7 f5-ns flex items-center`}>\n            Learn more\n            <Icon name=\"arrow-right\" className={`w3 h3 ml2 fill-black`} />\n        </span>\n    </Box>\n)\n\nSetupBox.propTypes = {\n    children: PropTypes.node.isRequired,\n    icon: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    to: PropTypes.string,\n    href: PropTypes.string,\n    iconClass: PropTypes.string,\n    headingClass: PropTypes.string,\n}\n\nexport default SetupBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Spirit } from '../styles/spirit-styles'\nimport { Layout } from '../components/common/layout'\nimport { SetupBox } from '../components/setup'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\n\nconst DocPage = ({ data, location }) => {\n    // Add meta title and description for this page here to overwrite the site meta data as set in the config\n    const title = `Documentation`\n    const description = `Path to all documentation.`\n    const imageUrl = getMetaImageUrls()\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"website\"\n                title={title || data.site.siteMetadata.title}\n                description={description || data.site.siteMetadata.description}\n                image={imageUrl}\n            />\n            <Layout mainClass=\"bg-whitegrey-l2 pb-vw3\" bodyClass=\"bg-white\">\n                <section className=\"bg-setup\">\n                    <div className={`${Spirit.page.xl} tc-ns pt-vw6 pt-vw5-ns pb-vw5 white`}>\n                        <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}>Documentation</h1>\n                    </div>\n                </section>\n\n                <div className={`${Spirit.page.xl} mt-vw3`}>\n\n                    <section className=\"grid-12 gutter-row-20 gutter-20-ns gutter-36-l\">\n                        <SetupBox to=\"/docs/userguide/\" title=\"User Guide\" icon=\"presentation-code\" iconClass=\"w9 h9\" headingClass=\"mt2\">\n                            <p className={`${Spirit.small} mw70`}>\n                                Learn the fundamentals of BioDynaMo and how to get started.\n                            </p>\n                        </SetupBox>\n\n                        <SetupBox to=\"/docs/devguide/\" title=\"Developer Guide\" icon=\"terminal\" iconClass=\"w9 h9\" headingClass=\"mt2\">\n                            <p className={`${Spirit.small} mw70`}>\n                                Learn how to build and contribute to the BioDynaMo project.\n                            </p>\n                        </SetupBox>\n\n                        <SetupBox href=\"/api\" title=\"API Reference\" icon=\"network\" iconClass=\"w9 h9\" headingClass=\"mt2\">\n                            <p className={`${Spirit.small} mw70`}>\n                                Learn the technical details to apply BioDynaMo to your own use case.\n                            </p>\n                        </SetupBox>\n\n                    </section>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nDocPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default DocPage\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            ...SiteMetaFields\n        }\n    }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta property=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@ghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"/images/bdm_logo.png\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image=\"/images/bdm_logo.png\"\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.ghost.org`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}